---
import Layout from '@layouts/Layout.astro';
import { truncateText } from '@scripts/textFormatter';
import { site } from '@config/site';
import { formatUrl } from '@scripts/urlFormatter';
import { formatThreatType } from '@scripts/threatFormatter';

const url = Astro.url.searchParams.get('url');
if (!url) {
  return Astro.redirect('/analyze');
}

const trimmedLink = truncateText(url);
const formattedUrl = formatUrl(url);
---

<Layout
  title={`result | ${url}`}
  description={`Feeling unsure about a website? ${site.name} instantly checks for scams, so you can surf with confidence`}
>
  <div class="flex flex-row top-center">
    <a class="mr-5" href="/analyze"
      ><img class="w-10 mt-1" src="./assets/svg/back.svg" alt="back" /></a
    >
    <h1 class="medium-text font-main tracking-tighter">
      Results for <a class="underline" href={formattedUrl} target="_blank">{trimmedLink}</a>
    </h1>
  </div>
  <div id="results-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5 mt-10">
    <div class="c-border p-5 min-h-[6rem] flex flex-col">
      <p class="font-regular md-text main-color mb-2">Risk Level</p>
      <div class="flex-1 flex items-center">
        <div class="w-full py-2 animate-pulse flex items-center min-h-[24px]">
          <div class="h-6 bg-gray-200 rounded-full dark:bg-gray-700 w-32"></div>
        </div>
        <p id="risk-level" class="font-regular sm-text main-color min-h-[24px] flex items-center">
        </p>
      </div>
    </div>
    <div class="c-border p-5 min-h-[6rem] flex flex-col">
      <p class="font-regular md-text main-color mb-2">Safe Browsing</p>
      <div class="flex-1 flex items-center">
        <div class="w-full py-2 animate-pulse flex items-center min-h-[24px]">
          <div class="h-6 bg-gray-200 rounded-full dark:bg-gray-700 w-32"></div>
        </div>
        <p
          id="safe-browsing"
          class="font-regular sm-text main-color min-h-[24px] flex items-center"
        >
        </p>
      </div>
    </div>
    <div class="c-border p-5 min-h-[6rem] flex flex-col">
      <p class="font-regular md-text main-color mb-2">AI Rating</p>
      <div class="flex-1 flex items-center">
        <div class="w-full py-2 animate-pulse flex items-center min-h-[24px]">
          <div class="h-6 bg-gray-200 rounded-full dark:bg-gray-700 w-32"></div>
        </div>
        <p id="ai-rating" class="font-regular sm-text main-color min-h-[24px] flex items-center">
        </p>
      </div>
    </div>
    <div class="c-border p-5 min-h-[6rem] flex flex-col">
      <p class="font-regular md-text main-color mb-2">Type</p>
      <div class="flex-1 flex items-center">
        <div class="w-full py-2 animate-pulse flex items-center min-h-[24px]">
          <div class="h-6 bg-gray-200 rounded-full dark:bg-gray-700 w-32"></div>
        </div>
        <p id="threat-type" class="font-regular sm-text main-color min-h-[24px] flex items-center">
        </p>
      </div>
    </div>
    <div class="c-border p-5 min-h-[6rem] flex flex-col">
      <p class="font-regular md-text main-color mb-2">Score</p>
      <div class="flex-1 flex items-center">
        <div class="w-full py-2 animate-pulse flex items-center min-h-[24px]">
          <div class="h-6 bg-gray-200 rounded-full dark:bg-gray-700 w-32"></div>
        </div>
        <p id="risk-score" class="font-regular sm-text main-color min-h-[24px] flex items-center">
        </p>
      </div>
    </div>
    <div class="c-border p-5 min-h-[6rem] flex flex-col">
      <p class="font-regular md-text main-color mb-2">Database Check</p>
      <div class="flex-1 flex items-center">
        <div class="w-full py-2 animate-pulse flex items-center min-h-[24px]">
          <div class="h-6 bg-gray-200 rounded-full dark:bg-gray-700 w-32"></div>
        </div>
        <p id="database-check" class="font-regular sm-text main-color min-h-[24px] flex items-center">
        </p>
      </div>
    </div>
  </div>

  <script>
    type ThreatSource = 'Google Safe Browsing' | 'AI Analysis';

    interface Threat {
      source: ThreatSource;
      type: string;
    }

    interface ScanResult {
      riskLevel: string;
      detectedThreats: Threat[];
      score: number;
      inDatabase: boolean;
      aiRating: string;
      safeBrowsing: string;
    }

    function updateElement(id: string, content: string) {
      const element = document.getElementById(id);
      const loadingEl = element?.previousElementSibling;
      if (element && loadingEl) {
        loadingEl.classList.add('hidden');
        element.classList.remove('hidden');
        element.textContent = content;
      }
    }

    function formatThreatType(type: string): string {
      const specialCases: Record<string, string> = {
        SOCIAL_ENGINEERING: 'Social Engineering',
        MALWARE: 'Malware',
        UNWANTED_SOFTWARE: 'Unwanted Software',
        POTENTIALLY_HARMFUL_APPLICATION: 'Potentially Harmful App',
      };

      return (
        specialCases[type] ||
        type
          .toLowerCase()
          .split('_')
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join(' ')
      );
    }

    async function fetchResults() {
      const currentUrl = new URL(window.location.href).searchParams.get('url');
      if (!currentUrl) return;

      try {
        const response = await fetch('/api/scan', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ url: currentUrl }),
        });

        if (!response.ok) throw new Error('Scan failed');

        const data = (await response.json()) as ScanResult;
        updateElement('risk-level', data.riskLevel);
        updateElement('risk-score', data.score.toString());
        updateElement('database-check', data.inDatabase ? 'Found in Database' : 'Not Found');
        updateElement('safe-browsing', data.safeBrowsing);
        updateElement('ai-rating', data.aiRating);
        updateElement('threat-type', data.detectedThreats.length > 0 
          ? data.detectedThreats[0].type 
          : 'No Known Threats'); 

      } catch (error) {
        const elements = ['risk-level', 'safe-browsing', 'ai-rating', 'threat-type', 'risk-score', 'database-check'];
        elements.forEach((id) => updateElement(id, 'Scan Failed'));
      }
    }
    
    fetchResults();
  </script>
</Layout>
